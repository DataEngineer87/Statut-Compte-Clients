name: üöÄ CI - Account Status Prediction

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-test-api:
    runs-on: ubuntu-latest

    steps:
      # 1Ô∏è‚É£ Cloner le d√©p√¥t
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2Ô∏è‚É£ Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

      # 3Ô∏è‚É£ Installer les d√©pendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests flake8

      # 4Ô∏è‚É£ V√©rifier la structure du projet
      - name: Verify project structure
        run: |
          echo "üìÅ Current working directory: $(pwd)"
          ls -R

      # 5Ô∏è‚É£ V√©rifier la qualit√© du code
      - name: Lint with flake8
        run: |
          flake8 Scripts --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 Scripts --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

      # 6Ô∏è‚É£ Ex√©cuter les tests unitaires
      - name: Run unit tests
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q

      # 7Ô∏è‚É£ Lancer FastAPI
      - name: Start FastAPI
        run: |
          nohup uvicorn app.api:app --host 0.0.0.0 --port 8000 &
          sleep 5
          echo "‚úÖ FastAPI server started"

      # 8Ô∏è‚É£ Tester l‚Äôendpoint /predict
      - name: Test FastAPI endpoint
        run: |
          python - <<'EOF'
          import requests, time, json
          time.sleep(3)
          url = "http://127.0.0.1:8000/predict"
          data = {
              "gender": "Male",
              "marital_status": "Single",
              "employment_status": "Employed",
              "education_level": "Bachelor",
              "subscription_type": "Premium",
              "age_group": "35-44",
              "number_of_children": 2,
              "children_per_age": 0.5,
              "log_annual_income": 10.5,
              "country": "France"
          }
          try:
              r = requests.post(url, json=data)
              print("Status:", r.status_code)
              print("Response:", r.text)
              assert r.status_code == 200, "API did not return 200 OK"
              assert "prediction" in r.json(), "No prediction in response"
              print("‚úÖ /predict endpoint test passed successfully")
          except Exception as e:
              raise SystemExit(f"‚ùå Test API failed: {e}")
          EOF

      # 9Ô∏è‚É£ Sauvegarder les artefacts de test (rapports, mod√®les, etc.)
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            reports/
            artifacts/
            mlruns/
          if-no-files-found: ignore

