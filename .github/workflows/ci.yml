name: CI - Account Status Prediction

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      # 1️⃣ Cloner le dépôt
      - name: Checkout repository
        uses: actions/checkout@v4

      # 2️⃣ Configurer Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.10

      # 3️⃣ Installer les dépendances
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest requests

      # 4️⃣ Vérifier la structure du projet
      - name: Verify project structure
        run: |
          echo "Current working directory: $(pwd)"
          ls -R

      # 5️⃣ Exécuter les tests unitaires (API, encodage, etc.)
      - name: Run unit tests
        run: |
          pytest tests/ --maxfail=1 --disable-warnings -q

      # 6️⃣ Lancer FastAPI en arrière-plan (pour test API réel)
      - name: Start FastAPI
        run: |
          nohup uvicorn app.api:app --host 0.0.0.0 --port 8000 &
          sleep 5
          echo "FastAPI server started"

      # 7️⃣ Tester l’endpoint /predict
      - name: Test FastAPI endpoint
        run: |
          python - <<'EOF'
          import requests, time, json
          time.sleep(3)
          url = "http://127.0.0.1:8000/predict"
          data = {
              "gender": "Male",
              "marital_status": "Single",
              "employment_status": "Employed",
              "education_level": "Bachelor",
              "subscription_type": "Premium",
              "age_group": "35-44",
              "number_of_children": 2,
              "children_per_age": 0.5,
              "log_annual_income": 10.5,
              "country": "France"
          }
          try:
              r = requests.post(url, json=data)
              print("Status:", r.status_code)
              print("Response:", r.text)
              assert r.status_code == 200, "API did not return 200 OK"
              assert "prediction" in r.json(), "No prediction in response"
          except Exception as e:
              raise SystemExit(f"❌ Test API failed: {e}")
          EOF

      # 8️⃣ Sauvegarder les artefacts de test (rapports, modèles, etc.)
      - name: Upload reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: reports
          path: |
            reports/
            artifacts/
            mlruns/
          if-no-files-found: ignore
